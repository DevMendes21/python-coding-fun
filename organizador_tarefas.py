"""
Organizador de Tarefas Priorit√°rias v1.0 - Vers√£o ultra-compacta
"""

from datetime import datetime, timedelta
from typing import List, Tuple
from dataclasses import dataclass, field
from enum import IntEnum
import sys


class Prioridade(IntEnum):
    """N√≠veis de prioridade com propriedades visuais."""
    ALTA, MEDIA, BAIXA = 1, 2, 3
    
    @property
    def emoji(self) -> str: return ["üî¥", "üü°", "üü¢"][self-1]
    
    @property
    def nome(self) -> str: return ["Alta", "M√©dia", "Baixa"][self-1]


@dataclass(order=True, frozen=True)
class Tarefa:
    """Tarefa com ordena√ß√£o autom√°tica por prioridade e data."""
    sort_index: Tuple[int, datetime] = field(init=False, repr=False, compare=True, hash=False)
    titulo: str
    descricao: str
    prioridade: Prioridade
    data_criacao: datetime
    
    def __post_init__(self):
        if not self.titulo.strip(): raise ValueError("T√≠tulo vazio")
        p = Prioridade(self.prioridade) if isinstance(self.prioridade, int) else self.prioridade
        object.__setattr__(self, 'prioridade', p)
        object.__setattr__(self, 'sort_index', (p.value, self.data_criacao))
    
    def __str__(self):
        return f"{self.prioridade.emoji} {self.data_criacao.strftime('%Y-%m-%d')} - {self.titulo} ({self.descricao})"


def exibir_tarefas(tarefas: List[Tarefa]) -> None:
    """Exibe tarefas ordenadas com formata√ß√£o visual."""
    tarefas_ordenadas = sorted(tarefas) if tarefas else []
    
    if not tarefas_ordenadas:
        print("\nüìã Sem tarefas\n")
        return
    
    # Exibi√ß√£o minimalista e eficiente
    print(f"\n{'=' * 40}\nTAREFAS PRIORIT√ÅRIAS\n{'=' * 40}")
    print(f"\nüî¥ Alta | üü° M√©dia | üü¢ Baixa\n{'-' * 40}")
    
    # Lista numerada de tarefas
    for i, t in enumerate(tarefas_ordenadas, 1):
        print(f"[{i}] {t}")
    print(f"{'-' * 40}\n{len(tarefas_ordenadas)} tarefa(s)\n")


def executar_testes():
    """Executa testes b√°sicos e exibe resultados."""
    print("TESTES UNIT√ÅRIOS\n" + "-" * 20)
    resultados = []
    
    # Teste 1: Cria√ß√£o
    try:
        t = Tarefa("Teste", "Descri√ß√£o", Prioridade.MEDIA, datetime.now())
        assert t.titulo == "Teste" and t.prioridade == Prioridade.MEDIA
        resultados.append(("‚úÖ", "Cria√ß√£o b√°sica"))
    except Exception as e:
        resultados.append(("‚ùå", f"Falha na cria√ß√£o: {e}"))
    
    # Teste 2: Valida√ß√£o
    try:
        Tarefa("Teste", "Descri√ß√£o", 5, datetime.now())
        resultados.append(("‚ùå", "Aceitou prioridade inv√°lida"))
    except ValueError:
        resultados.append(("‚úÖ", "Rejeitou prioridade inv√°lida"))
    
    # Teste 3: Ordena√ß√£o
    hoje = datetime.now()
    tarefas = [
        Tarefa("Alta hoje", "Desc", Prioridade.ALTA, hoje),
        Tarefa("Alta ontem", "Desc", Prioridade.ALTA, hoje - timedelta(days=1))
    ]
    ordenadas = sorted(tarefas)
    if ordenadas[0].data_criacao < ordenadas[1].data_criacao:
        resultados.append(("‚úÖ", "Ordena√ß√£o correta"))
    else:
        resultados.append(("‚ùå", "Ordena√ß√£o incorreta"))
    
    # Exibe resultados
    for status, msg in resultados:
        print(f"{status} {msg}")
    
    print(f"\nRESUMO: {sum(1 for s, _ in resultados if s == '‚úÖ')}/{len(resultados)} testes OK\n")


# Ponto de entrada com tratamento de erros
if __name__ == "__main__":
    try:
        # Modo de teste
        if len(sys.argv) > 1 and sys.argv[1] == "--test":
            executar_testes()
        else:
            # Tarefas de exemplo usei o inline para maior concis√£o
            exibir_tarefas([
                Tarefa("Revis√£o de c√≥digo", "Analisar algoritmos de ML", Prioridade.ALTA, datetime(2025, 7, 1)),
                Tarefa("Compras semanais", "Produtos org√¢nicos e itens de casa", Prioridade.BAIXA, datetime(2025, 7, 3)),
                Tarefa("Organizar workspace", "Limpar arquivos tempor√°rios", Prioridade.MEDIA, datetime(2025, 7, 1)),
                Tarefa("Preparar apresenta√ß√£o Q3", "Dashboard de resultados", Prioridade.ALTA, datetime(2025, 7, 2)),
                Tarefa("Agendar manuten√ß√£o VR", "Atualiza√ß√£o de firmware", Prioridade.MEDIA, datetime(2025, 7, 2))
            ])
    except KeyboardInterrupt:
        print("\n‚ùå Programa interrompido")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        sys.exit(1)
